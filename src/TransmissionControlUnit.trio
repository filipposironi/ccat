class TransmissionControlUnit 

signature: 

	visible:
		controlGearShift,
		receiveEngineSpeed,
		receiveVehicleSpeed;

	temporal domain: real;
	
	domains:
		ShiftWidth: 1..2;
		ShiftDirection: {Up, Down};

	items: 
		event controlGearShift (ShiftWidth, ShiftDirection);
		event receiveEngineSpeed (integer);
		event receiveVehicleSpeed (integer, integer);
		
	 axioms:
	 vars:
	 	engineSpeed: integer;
	 	deltaVehicleSpeed: integer;
	 	vehicleSpeed: integer;
	 	gearShiftWidth1: ShiftWidth;
	 	gearShiftWidth2: ShiftWidth;
	 	gearShiftDirection1: ShiftDirection;
	 	gearShiftDirection2: ShiftDirection;
	 formulae:	 	 
	 	/*
		 * Considerando che la velocita' di funzionamento dell'elettronica e'
		 * normalmente superiore alla velocita' di funzionamento della meccanica
		 * ed ai tempi di reazione umani possiamo assumere che quando il
		 * veicolo si ferma il tempo necessario per campionare la velocita'
		 * e portare il veicolo in prima marcia e' inferiore al tempo necessario
		 * all'utente per ripartire.
		 */
	 	GearShifts:
		 	(
		 		receiveEngineSpeed (engineSpeed) &
		 		receiveVehicleSpeed (deltaVehicleSpeed, vehicleSpeed) &
		 		engineSpeed >= 3000 &
		 		vehicleSpeed > 0 ->
		 		gearShiftWidth1 = 1 & gearShiftDirection1 = Up &
		 		controlGearShift (gearShiftWidth1, gearShiftDirection1)
		 	) &
		 	(
		 		receiveEngineSpeed (engineSpeed) &
		 		receiveVehicleSpeed (deltaVehicleSpeed, vehicleSpeed) &
		 		engineSpeed <= 1500 &
		 		deltaVehicleSpeed < 0 ->
		 		gearShiftWidth1 = 1 & gearShiftDirection1 = Down &
		 		controlGearShift (gearShiftWidth1, gearShiftDirection1)
		 	) &
		 	(
		 		receiveEngineSpeed (engineSpeed) &
		 		receiveVehicleSpeed (deltaVehicleSpeed, vehicleSpeed) &
		 		engineSpeed <= 1500 &
		 		deltaVehicleSpeed >= 0 & vehicleSpeed > 0 ->
				all gearShiftWidth1, gearShiftDirection1
				(
					not controlGearShift (gearShiftWidth1, gearShiftDirection1)
				)
			) &
			(
				receiveEngineSpeed (engineSpeed) &
				receiveVehicleSpeed (deltaVehicleSpeed, vehicleSpeed) &
				engineSpeed >= 1500 &
				engineSpeed < 3000 ->
				all gearShiftWidth1, gearShiftDirection1
				(
					not controlGearShift (gearShiftWidth1, gearShiftDirection1)
				)
			);
					
		MutualExclusions:
			all gearShiftWidth1, gearShiftDirection1
			(
				controlGearShift (gearShiftWidth1, gearShiftDirection1) ->
				all gearShiftWidth2, gearShiftDirection2
				(
					gearShiftWidth1 <> gearShiftWidth2 &
					gearShiftDirection1 <> gearShiftDirection2 ->
					not controlGearShift (gearShiftWidth2, gearShiftDirection2)
				)
			); 
		 
end