variables

	/* 0:drive, 1:park, 2:reverse */
	gearHandle: [0..2],

	gearShift: [0..3], /*
						* 0: 1 up
						* 1: 2 up
						* 2: 1 down
						* 3: 2 down
						*/
	gearDrive:[0..1],
	gearPark:[0..1],
	gearReverse:[0..1],
 	controlGearShift: [0..3]   /*
								* 0: 1 up
								* 1: 2 up
								* 2: 1 down
								* 3: 2 down
								*/ 

constants

	fluidPropagationDelay = 2;

axioms

	Start:
		Now(gearHandle = 1);

	GearHandleCommand:
		(gearHandle = 0 
				-> 
			not Lasts (	gearHandle = 1 |  
						gearHandle = 2 | 
						controlGearShift = 0 | 
						controlGearShift = 1 | 
						controlGearShift = 2 | 
						controlGearShift = 3, fluidPropagationDelay) & Futr (gearDrive = 1, fluidPropagationDelay) 
		)	
		&
		(gearHandle = 1 
				-> 
			not Lasts (	gearHandle = 0 |  
						gearHandle = 2 | 
						controlGearShift = 0 | 
						controlGearShift = 1 | 
						controlGearShift = 2 | 
						controlGearShift = 3, fluidPropagationDelay) & Futr (gearPark = 1, fluidPropagationDelay) 
		)	
		&
		(gearHandle = 2 
				->
			not Lasts (	gearHandle = 0 | 
		 				gearHandle = 1 | 
						controlGearShift = 0 | 
						controlGearShift = 1 | 
						controlGearShift = 2 | 
						controlGearShift = 3, fluidPropagationDelay) & Futr (gearReverse, fluidPropagationDelay)
	    );
	
	
	PropagateGearShiftCommand:
	
			((controlGearShift = 0 | controlGearShift = 1 | controlGearShift = 2 | controlGearShift = 3)
			 		-> 
				not Lasts ( gearDrive = 1 | 
							gearPark = 1 | 
							gearReverse = 1 | 
							controlGearShift = 0 | 
							controlGearShift = 1 | 
							controlGearShift = 2 | 
							controlGearShift = 3, fluidPropagationDelay)
			) &
			(controlGearShift = 0 ->  Futr (gearShift = 0 , fluidPropagationDelay)) &
			(controlGearShift = 1 ->  Futr (gearShift = 1 , fluidPropagationDelay)) &
			(controlGearShift = 2 ->  Futr (gearShift = 2 , fluidPropagationDelay)) &
			(controlGearShift = 3 ->  Futr (gearShift = 3 , fluidPropagationDelay));

	MutualExclusions:
			gearHandle = 0 -> not (gearHandle = 1 | gearHandle = 2) &
			gearHandle = 1 -> not (gearHandle = 0 | gearHandle = 2) &
			gearHandle = 2 -> not (gearHandle = 0 | gearHandle = 1);