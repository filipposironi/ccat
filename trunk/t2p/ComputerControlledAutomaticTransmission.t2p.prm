int actualGear;
bool transmissionShaftState;
byte gearShift;
byte gearHandle;
byte controlGearShift;
bool s=1;
bool t0;


proctype Futr_1(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==0&&(gearShift==2)->i=0; msg!1,1,proc;
							::i==0&&!(gearShift==2)->i=0; msg!0,1,proc;
							::i<0->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_2(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==0&&(gearShift==3)->i=0; msg!1,1,proc;
							::i==0&&!(gearShift==3)->i=0; msg!0,1,proc;
							::i<0->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_3(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==0&&(gearShift==4)->i=0; msg!1,1,proc;
							::i==0&&!(gearShift==4)->i=0; msg!0,1,proc;
							::i<0->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_4(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==0&&(gearShift==5)->i=0; msg!1,1,proc;
							::i==0&&!(gearShift==5)->i=0; msg!0,1,proc;
							::i<0->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_5(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==0&&(gearShift==1)->i=0; msg!1,1,proc;
							::i==0&&!(gearShift==1)->i=0; msg!0,1,proc;
							::i<0->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_6(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==0&&(gearShift==6)->i=0; msg!1,1,proc;
							::i==0&&!(gearShift==6)->i=0; msg!0,1,proc;
							::i<0->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_7(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==0&&(gearShift==7)->i=0; msg!1,1,proc;
							::i==0&&!(gearShift==7)->i=0; msg!0,1,proc;
							::i<0->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_8(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==1&&(actualGear==1)->i=0; msg!1,1,proc;
							::i==1&&!(actualGear==1)->i=0; msg!0,1,proc;
							::i<1->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_9(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==2&&(actualGear==2)->i=0; msg!1,1,proc;
							::i==2&&!(actualGear==2)->i=0; msg!0,1,proc;
							::i<2->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_10(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==2&&(actualGear==3)->i=0; msg!1,1,proc;
							::i==2&&!(actualGear==3)->i=0; msg!0,1,proc;
							::i<2->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_11(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==2&&(actualGear==2)->i=0; msg!1,1,proc;
							::i==2&&!(actualGear==2)->i=0; msg!0,1,proc;
							::i<2->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_12(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==1&&(actualGear==2)->i=0; msg!1,1,proc;
							::i==1&&!(actualGear==2)->i=0; msg!0,1,proc;
							::i<1->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_13(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==1&&(actualGear==0)->i=0; msg!1,1,proc;
							::i==1&&!(actualGear==0)->i=0; msg!0,1,proc;
							::i<1->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_14(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==1&&(actualGear==1)->i=0; msg!1,1,proc;
							::i==1&&!(actualGear==1)->i=0; msg!0,1,proc;
							::i<1->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_15(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==2&&(actualGear==0)->i=0; msg!1,1,proc;
							::i==2&&!(actualGear==0)->i=0; msg!0,1,proc;
							::i<2->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_16(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==2&&(actualGear==0)->i=0; msg!1,1,proc;
							::i==2&&!(actualGear==0)->i=0; msg!0,1,proc;
							::i<2->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_17(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==2&&(actualGear==3)->i=0; msg!1,1,proc;
							::i==2&&!(actualGear==3)->i=0; msg!0,1,proc;
							::i<2->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_18(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==2&&(actualGear==0)->i=0; msg!1,1,proc;
							::i==2&&!(actualGear==0)->i=0; msg!0,1,proc;
							::i<2->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype Futr_19(chan msg; byte proc){
byte i;
bool val1, val2;
i=0;
		do
			::msg?val1,val2,eval(proc);
			if
				::!val1->goto stop;
				::val1->
						if
							::i==2&&(actualGear==4)->i=0; msg!1,1,proc;
							::i==2&&!(actualGear==4)->i=0; msg!0,1,proc;
							::i<2->i++;msg!1,0,proc;
						fi;
			fi;
		od;
stop: skip;
}

proctype spe(){
byte i, proc;
bool status, value, flag;
chan msg=[0] of {bool,bool,byte};

bool ex_Lasts_1=0;
byte cont_lasts_1=0;

bool ex_Lasts_2=0;
byte cont_lasts_2=0;

bool ex_Lasts_3=0;
byte cont_lasts_3=0;

bool ex_Lasts_4=0;
byte cont_lasts_4=0;

bool ex_Lasts_5=0;
byte cont_lasts_5=0;

bool ex_Lasts_6=0;
byte cont_lasts_6=0;

bool ex_Lasts_7=0;
byte cont_lasts_7=0;

bool ex_Lasts_8=0;
byte cont_lasts_8=0;

bool ex_Lasts_9=0;
byte cont_lasts_9=0;

bool ex_Lasts_10=0;
byte cont_lasts_10=0;

bool ex_Lasts_11=0;
byte cont_lasts_11=0;

bool ex_Lasts_12=0;
byte cont_lasts_12=0;

bool ex_Lasts_13=0;
byte cont_lasts_13=0;

bool ex_Lasts_14=0;
byte cont_lasts_14=0;

bool ex_Lasts_15=0;
byte cont_lasts_15=0;

bool ex_Lasts_16=0;
byte cont_lasts_16=0;

bool ex_Lasts_17=0;
byte cont_lasts_17=0;

bool ex_Lasts_18=0;
byte cont_lasts_18=0;

bool ex_Lasts_19=0;
byte cont_lasts_19=0;

bool ex_Lasts_20=0;
byte cont_lasts_20=0;

bool start_1=1;
bool ex_futr_1[1];
bool ex_futr_2[1];
bool ex_futr_3[1];
bool ex_futr_4[1];
bool ex_futr_5[1];
bool ex_futr_6[1];
bool ex_futr_7[1];
bool ex_futr_8[2];
bool ex_futr_9[3];
bool ex_futr_10[3];
bool ex_futr_11[3];
bool ex_futr_12[2];
bool ex_futr_13[2];
bool ex_futr_14[2];
bool ex_futr_15[3];
bool ex_futr_16[3];
bool ex_futr_17[3];
bool ex_futr_18[3];
bool ex_futr_19[3];
i=0;
do
	::i<1-> proc=2+i;
		run Futr_1(msg,proc);
		i++;
	::i==1->break;
od;

i=0;
do
	::i<1-> proc=3+i;
		run Futr_2(msg,proc);
		i++;
	::i==1->break;
od;

i=0;
do
	::i<1-> proc=4+i;
		run Futr_3(msg,proc);
		i++;
	::i==1->break;
od;

i=0;
do
	::i<1-> proc=5+i;
		run Futr_4(msg,proc);
		i++;
	::i==1->break;
od;

i=0;
do
	::i<1-> proc=6+i;
		run Futr_5(msg,proc);
		i++;
	::i==1->break;
od;

i=0;
do
	::i<1-> proc=7+i;
		run Futr_6(msg,proc);
		i++;
	::i==1->break;
od;

i=0;
do
	::i<1-> proc=8+i;
		run Futr_7(msg,proc);
		i++;
	::i==1->break;
od;

i=0;
do
	::i<2-> proc=9+i;
		run Futr_8(msg,proc);
		i++;
	::i==2->break;
od;

i=0;
do
	::i<3-> proc=11+i;
		run Futr_9(msg,proc);
		i++;
	::i==3->break;
od;

i=0;
do
	::i<3-> proc=14+i;
		run Futr_10(msg,proc);
		i++;
	::i==3->break;
od;

i=0;
do
	::i<3-> proc=17+i;
		run Futr_11(msg,proc);
		i++;
	::i==3->break;
od;

i=0;
do
	::i<2-> proc=20+i;
		run Futr_12(msg,proc);
		i++;
	::i==2->break;
od;

i=0;
do
	::i<2-> proc=22+i;
		run Futr_13(msg,proc);
		i++;
	::i==2->break;
od;

i=0;
do
	::i<2-> proc=24+i;
		run Futr_14(msg,proc);
		i++;
	::i==2->break;
od;

i=0;
do
	::i<3-> proc=26+i;
		run Futr_15(msg,proc);
		i++;
	::i==3->break;
od;

i=0;
do
	::i<3-> proc=29+i;
		run Futr_16(msg,proc);
		i++;
	::i==3->break;
od;

i=0;
do
	::i<3-> proc=32+i;
		run Futr_17(msg,proc);
		i++;
	::i==3->break;
od;

i=0;
do
	::i<3-> proc=35+i;
		run Futr_18(msg,proc);
		i++;
	::i==3->break;
od;

i=0;
do
	::i<3-> proc=38+i;
		run Futr_19(msg,proc);
		i++;
	::i==3->break;
od;

rigen:

atomic{

	if
		::actualGear=1;
		::actualGear=2;
		::actualGear=3;
		::actualGear=4;
		::actualGear=5;
	fi;

	if
		::transmissionShaftState=0;
		::transmissionShaftState=1;
	fi;

	if
		::gearShift=0;
		::gearShift=1;
		::gearShift=2;
		::gearShift=3;
		::gearShift=4;
		::gearShift=5;
		::gearShift=6;
		::gearShift=7;
	fi;

	if
		::gearHandle=0;
		::gearHandle=1;
		::gearHandle=2;
		::gearHandle=3;
	fi;

	if
		::controlGearShift=0;
		::controlGearShift=1;
		::controlGearShift=2;
		::controlGearShift=3;
		::controlGearShift=4;
	fi;

}

	if
		::start_1==1->
			if
				::!(gearHandle==1 && actualGear==0)-> s=0; goto gen;
				::(gearHandle==1 && actualGear==0)->start_1=0;
			fi;
		::!(start_1==1)->skip;
	fi;

			if
				::!(gearShift!=2 && gearShift!=3 || transmissionShaftState==1)-> s=0; goto gen;

				::(gearShift!=2 && gearShift!=3 || transmissionShaftState==1)->skip;

			fi;
	atomic{
	i=0;
	do
		::i<1-> proc=2+i;
			if
				::ex_futr_1[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_1[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_1[i]->skip;
			fi;
			i++;
		::i==1->break;
	od;
	i=0;
	do
		::i<1-> proc=3+i;
			if
				::ex_futr_2[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_2[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_2[i]->skip;
			fi;
			i++;
		::i==1->break;
	od;
	i=0;
	do
		::i<1-> proc=4+i;
			if
				::ex_futr_3[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_3[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_3[i]->skip;
			fi;
			i++;
		::i==1->break;
	od;
	i=0;
	do
		::i<1-> proc=5+i;
			if
				::ex_futr_4[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_4[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_4[i]->skip;
			fi;
			i++;
		::i==1->break;
	od;

	if
		::ex_Lasts_1->
			if
				::cont_lasts_1<1 && !(gearHandle==0) -> flag = 1;
				::cont_lasts_1<1 && (gearHandle==0) -> cont_lasts_1++;
				::cont_lasts_1==1 -> ex_Lasts_1=0;
			fi;
		::!ex_Lasts_1-> skip;
	fi;

	if
		::ex_Lasts_2->
			if
				::cont_lasts_2<1 && !(controlGearShift==0) -> flag = 1;
				::cont_lasts_2<1 && (controlGearShift==0) -> cont_lasts_2++;
				::cont_lasts_2==1 -> ex_Lasts_2=0;
			fi;
		::!ex_Lasts_2-> skip;
	fi;

	}
	if
		::flag==1 -> s=0; goto gen;
		::flag!=1 ->
			if
				::!(!((controlGearShift==1 || controlGearShift==2 || controlGearShift==3 || controlGearShift==4)))->

					if
						::gearHandle==0-> ex_Lasts_1=1; cont_lasts_1=0;
						::!(gearHandle==0)-> s=0; goto gen;
					fi;

					ex_Lasts_2=1; cont_lasts_2 = 0;

			if
				::!(controlGearShift!=1)->

					i=0;
					do
						::i<1 && ex_futr_1[i]==0 -> ex_futr_1[i]=1;break;
						::i==1-> s=0; goto gen;
						::i<1 && ex_futr_1[i]!=0 -> i++;
					od;

				::(controlGearShift!=1)->skip;

			fi;
			if
				::!(controlGearShift!=2)->

					i=0;
					do
						::i<1 && ex_futr_2[i]==0 -> ex_futr_2[i]=1;break;
						::i==1-> s=0; goto gen;
						::i<1 && ex_futr_2[i]!=0 -> i++;
					od;

				::(controlGearShift!=2)->skip;

			fi;
			if
				::!(controlGearShift!=3)->

					i=0;
					do
						::i<1 && ex_futr_3[i]==0 -> ex_futr_3[i]=1;break;
						::i==1-> s=0; goto gen;
						::i<1 && ex_futr_3[i]!=0 -> i++;
					od;

				::(controlGearShift!=3)->skip;

			fi;
			if
				::!(controlGearShift!=4)->

					i=0;
					do
						::i<1 && ex_futr_4[i]==0 -> ex_futr_4[i]=1;break;
						::i==1-> s=0; goto gen;
						::i<1 && ex_futr_4[i]!=0 -> i++;
					od;

				::(controlGearShift!=4)->skip;

			fi;
				::(!((controlGearShift==1 || controlGearShift==2 || controlGearShift==3 || controlGearShift==4)))->skip;

			fi;
	fi;
	atomic{
	i=0;
	do
		::i<1-> proc=6+i;
			if
				::ex_futr_5[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_5[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_5[i]->skip;
			fi;
			i++;
		::i==1->break;
	od;
	i=0;
	do
		::i<1-> proc=7+i;
			if
				::ex_futr_6[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_6[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_6[i]->skip;
			fi;
			i++;
		::i==1->break;
	od;
	i=0;
	do
		::i<1-> proc=8+i;
			if
				::ex_futr_7[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_7[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_7[i]->skip;
			fi;
			i++;
		::i==1->break;
	od;

	if
		::ex_Lasts_3->
			if
				::cont_lasts_3<1 && !(controlGearShift==0) -> flag = 1;
				::cont_lasts_3<1 && (controlGearShift==0) -> cont_lasts_3++;
				::cont_lasts_3==1 -> ex_Lasts_3=0;
			fi;
		::!ex_Lasts_3-> skip;
	fi;

	if
		::ex_Lasts_4->
			if
				::cont_lasts_4<1 && !(gearHandle==0) -> flag = 1;
				::cont_lasts_4<1 && (gearHandle==0) -> cont_lasts_4++;
				::cont_lasts_4==1 -> ex_Lasts_4=0;
			fi;
		::!ex_Lasts_4-> skip;
	fi;

	if
		::ex_Lasts_5->
			if
				::cont_lasts_5<1 && !(controlGearShift==0) -> flag = 1;
				::cont_lasts_5<1 && (controlGearShift==0) -> cont_lasts_5++;
				::cont_lasts_5==1 -> ex_Lasts_5=0;
			fi;
		::!ex_Lasts_5-> skip;
	fi;

	if
		::ex_Lasts_6->
			if
				::cont_lasts_6<1 && !(gearHandle==0) -> flag = 1;
				::cont_lasts_6<1 && (gearHandle==0) -> cont_lasts_6++;
				::cont_lasts_6==1 -> ex_Lasts_6=0;
			fi;
		::!ex_Lasts_6-> skip;
	fi;

	if
		::ex_Lasts_7->
			if
				::cont_lasts_7<1 && !(controlGearShift==0) -> flag = 1;
				::cont_lasts_7<1 && (controlGearShift==0) -> cont_lasts_7++;
				::cont_lasts_7==1 -> ex_Lasts_7=0;
			fi;
		::!ex_Lasts_7-> skip;
	fi;

	if
		::ex_Lasts_8->
			if
				::cont_lasts_8<1 && !(gearHandle==0) -> flag = 1;
				::cont_lasts_8<1 && (gearHandle==0) -> cont_lasts_8++;
				::cont_lasts_8==1 -> ex_Lasts_8=0;
			fi;
		::!ex_Lasts_8-> skip;
	fi;

	}
	if
		::flag==1 -> s=0; goto gen;
		::flag!=1 ->
			if
				::!(gearHandle!=1)->

					if
						::controlGearShift==0-> ex_Lasts_3=1; cont_lasts_3=0;
						::!(controlGearShift==0)-> s=0; goto gen;
					fi;

					ex_Lasts_4=1; cont_lasts_4 = 0;

					i=0;
					do
						::i<1 && ex_futr_5[i]==0 -> ex_futr_5[i]=1;break;
						::i==1-> s=0; goto gen;
						::i<1 && ex_futr_5[i]!=0 -> i++;
					od;

				::(gearHandle!=1)->skip;

			fi;
			if
				::!(gearHandle!=2)->

					if
						::controlGearShift==0-> ex_Lasts_5=1; cont_lasts_5=0;
						::!(controlGearShift==0)-> s=0; goto gen;
					fi;

					ex_Lasts_6=1; cont_lasts_6 = 0;

					i=0;
					do
						::i<1 && ex_futr_6[i]==0 -> ex_futr_6[i]=1;break;
						::i==1-> s=0; goto gen;
						::i<1 && ex_futr_6[i]!=0 -> i++;
					od;

				::(gearHandle!=2)->skip;

			fi;
			if
				::!(gearHandle!=3)->

					if
						::controlGearShift==0-> ex_Lasts_7=1; cont_lasts_7=0;
						::!(controlGearShift==0)-> s=0; goto gen;
					fi;

					ex_Lasts_8=1; cont_lasts_8 = 0;

					i=0;
					do
						::i<1 && ex_futr_7[i]==0 -> ex_futr_7[i]=1;break;
						::i==1-> s=0; goto gen;
						::i<1 && ex_futr_7[i]!=0 -> i++;
					od;

				::(gearHandle!=3)->skip;

			fi;
	fi;
			if
				::!(gearShift!=1 || transmissionShaftState==0)-> s=0; goto gen;

				::(gearShift!=1 || transmissionShaftState==0)->skip;

			fi;
	atomic{
	i=0;
	do
		::i<2-> proc=9+i;
			if
				::ex_futr_8[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_8[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_8[i]->skip;
			fi;
			i++;
		::i==2->break;
	od;
	i=0;
	do
		::i<3-> proc=11+i;
			if
				::ex_futr_9[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_9[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_9[i]->skip;
			fi;
			i++;
		::i==3->break;
	od;
	i=0;
	do
		::i<3-> proc=14+i;
			if
				::ex_futr_10[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_10[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_10[i]->skip;
			fi;
			i++;
		::i==3->break;
	od;
	i=0;
	do
		::i<3-> proc=17+i;
			if
				::ex_futr_11[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_11[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_11[i]->skip;
			fi;
			i++;
		::i==3->break;
	od;

	if
		::ex_Lasts_9->
			if
				::cont_lasts_9<2 && !(gearShift==0) -> flag = 1;
				::cont_lasts_9<2 && (gearShift==0) -> cont_lasts_9++;
				::cont_lasts_9==2 -> ex_Lasts_9=0;
			fi;
		::!ex_Lasts_9-> skip;
	fi;

	if
		::ex_Lasts_10->
			if
				::cont_lasts_10<3 && !(gearShift==0) -> flag = 1;
				::cont_lasts_10<3 && (gearShift==0) -> cont_lasts_10++;
				::cont_lasts_10==3 -> ex_Lasts_10=0;
			fi;
		::!ex_Lasts_10-> skip;
	fi;

	if
		::ex_Lasts_11->
			if
				::cont_lasts_11<3 && !(gearShift==0) -> flag = 1;
				::cont_lasts_11<3 && (gearShift==0) -> cont_lasts_11++;
				::cont_lasts_11==3 -> ex_Lasts_11=0;
			fi;
		::!ex_Lasts_11-> skip;
	fi;

	if
		::ex_Lasts_12->
			if
				::cont_lasts_12<3 && !(gearShift==0) -> flag = 1;
				::cont_lasts_12<3 && (gearShift==0) -> cont_lasts_12++;
				::cont_lasts_12==3 -> ex_Lasts_12=0;
			fi;
		::!ex_Lasts_12-> skip;
	fi;

	}
	if
		::flag==1 -> s=0; goto gen;
		::flag!=1 ->
			if
				::(actualGear!=0 || gearShift==0 || gearShift==2 || gearShift==3 || gearShift==6 || gearShift==7)->

			if
				::!(actualGear!=0 || gearShift!=2)->

					ex_Lasts_9=1; cont_lasts_9 = 0;

					i=0;
					do
						::i<2 && ex_futr_8[i]==0 -> ex_futr_8[i]=1;break;
						::i==2-> s=0; goto gen;
						::i<2 && ex_futr_8[i]!=0 -> i++;
					od;

				::(actualGear!=0 || gearShift!=2)->skip;

			fi;
				::!((actualGear!=0 || gearShift==0 || gearShift==2 || gearShift==3 || gearShift==6 || gearShift==7))-> s=0; goto gen;

			fi;
			if
				::!(actualGear!=0 || gearShift!=3)->

					ex_Lasts_10=1; cont_lasts_10 = 0;

					i=0;
					do
						::i<3 && ex_futr_9[i]==0 -> ex_futr_9[i]=1;break;
						::i==3-> s=0; goto gen;
						::i<3 && ex_futr_9[i]!=0 -> i++;
					od;

				::(actualGear!=0 || gearShift!=3)->skip;

			fi;
			if
				::!(actualGear!=0 || gearShift!=6)->

					ex_Lasts_11=1; cont_lasts_11 = 0;

					i=0;
					do
						::i<3 && ex_futr_10[i]==0 -> ex_futr_10[i]=1;break;
						::i==3-> s=0; goto gen;
						::i<3 && ex_futr_10[i]!=0 -> i++;
					od;

				::(actualGear!=0 || gearShift!=6)->skip;

			fi;
			if
				::!(actualGear!=0 || gearShift!=7)->

					ex_Lasts_12=1; cont_lasts_12 = 0;

					i=0;
					do
						::i<3 && ex_futr_11[i]==0 -> ex_futr_11[i]=1;break;
						::i==3-> s=0; goto gen;
						::i<3 && ex_futr_11[i]!=0 -> i++;
					od;

				::(actualGear!=0 || gearShift!=7)->skip;

			fi;
	fi;
	atomic{
	i=0;
	do
		::i<2-> proc=20+i;
			if
				::ex_futr_12[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_12[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_12[i]->skip;
			fi;
			i++;
		::i==2->break;
	od;
	i=0;
	do
		::i<2-> proc=22+i;
			if
				::ex_futr_13[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_13[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_13[i]->skip;
			fi;
			i++;
		::i==2->break;
	od;

	if
		::ex_Lasts_13->
			if
				::cont_lasts_13<2 && !(gearShift==0) -> flag = 1;
				::cont_lasts_13<2 && (gearShift==0) -> cont_lasts_13++;
				::cont_lasts_13==2 -> ex_Lasts_13=0;
			fi;
		::!ex_Lasts_13-> skip;
	fi;

	if
		::ex_Lasts_14->
			if
				::cont_lasts_14<2 && !(gearShift==0) -> flag = 1;
				::cont_lasts_14<2 && (gearShift==0) -> cont_lasts_14++;
				::cont_lasts_14==2 -> ex_Lasts_14=0;
			fi;
		::!ex_Lasts_14-> skip;
	fi;

	}
	if
		::flag==1 -> s=0; goto gen;
		::flag!=1 ->
			if
				::(actualGear!=1 || gearShift==0 || gearShift==2 || gearShift==4)->

			if
				::!(actualGear!=1 || gearShift!=2)->

					ex_Lasts_13=1; cont_lasts_13 = 0;

					i=0;
					do
						::i<2 && ex_futr_12[i]==0 -> ex_futr_12[i]=1;break;
						::i==2-> s=0; goto gen;
						::i<2 && ex_futr_12[i]!=0 -> i++;
					od;

				::(actualGear!=1 || gearShift!=2)->skip;

			fi;
				::!((actualGear!=1 || gearShift==0 || gearShift==2 || gearShift==4))-> s=0; goto gen;

			fi;
			if
				::!(actualGear!=1 || gearShift!=4)->

					ex_Lasts_14=1; cont_lasts_14 = 0;

					i=0;
					do
						::i<2 && ex_futr_13[i]==0 -> ex_futr_13[i]=1;break;
						::i==2-> s=0; goto gen;
						::i<2 && ex_futr_13[i]!=0 -> i++;
					od;

				::(actualGear!=1 || gearShift!=4)->skip;

			fi;
	fi;
	atomic{
	i=0;
	do
		::i<2-> proc=24+i;
			if
				::ex_futr_14[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_14[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_14[i]->skip;
			fi;
			i++;
		::i==2->break;
	od;
	i=0;
	do
		::i<3-> proc=26+i;
			if
				::ex_futr_15[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_15[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_15[i]->skip;
			fi;
			i++;
		::i==3->break;
	od;

	if
		::ex_Lasts_15->
			if
				::cont_lasts_15<2 && !(gearShift==0) -> flag = 1;
				::cont_lasts_15<2 && (gearShift==0) -> cont_lasts_15++;
				::cont_lasts_15==2 -> ex_Lasts_15=0;
			fi;
		::!ex_Lasts_15-> skip;
	fi;

	if
		::ex_Lasts_16->
			if
				::cont_lasts_16<3 && !(gearShift==0) -> flag = 1;
				::cont_lasts_16<3 && (gearShift==0) -> cont_lasts_16++;
				::cont_lasts_16==3 -> ex_Lasts_16=0;
			fi;
		::!ex_Lasts_16-> skip;
	fi;

	}
	if
		::flag==1 -> s=0; goto gen;
		::flag!=1 ->
			if
				::(actualGear!=2 || gearShift==0 || gearShift==4 || gearShift==5)->

			if
				::!(actualGear!=2 || gearShift!=4)->

					ex_Lasts_15=1; cont_lasts_15 = 0;

					i=0;
					do
						::i<2 && ex_futr_14[i]==0 -> ex_futr_14[i]=1;break;
						::i==2-> s=0; goto gen;
						::i<2 && ex_futr_14[i]!=0 -> i++;
					od;

				::(actualGear!=2 || gearShift!=4)->skip;

			fi;
				::!((actualGear!=2 || gearShift==0 || gearShift==4 || gearShift==5))-> s=0; goto gen;

			fi;
			if
				::!(actualGear!=2 || gearShift!=5)->

					ex_Lasts_16=1; cont_lasts_16 = 0;

					i=0;
					do
						::i<3 && ex_futr_15[i]==0 -> ex_futr_15[i]=1;break;
						::i==3-> s=0; goto gen;
						::i<3 && ex_futr_15[i]!=0 -> i++;
					od;

				::(actualGear!=2 || gearShift!=5)->skip;

			fi;
	fi;
	atomic{
	i=0;
	do
		::i<3-> proc=29+i;
			if
				::ex_futr_16[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_16[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_16[i]->skip;
			fi;
			i++;
		::i==3->break;
	od;
	i=0;
	do
		::i<3-> proc=32+i;
			if
				::ex_futr_17[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_17[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_17[i]->skip;
			fi;
			i++;
		::i==3->break;
	od;

	if
		::ex_Lasts_17->
			if
				::cont_lasts_17<3 && !(gearShift==0) -> flag = 1;
				::cont_lasts_17<3 && (gearShift==0) -> cont_lasts_17++;
				::cont_lasts_17==3 -> ex_Lasts_17=0;
			fi;
		::!ex_Lasts_17-> skip;
	fi;

	if
		::ex_Lasts_18->
			if
				::cont_lasts_18<3 && !(gearShift==0) -> flag = 1;
				::cont_lasts_18<3 && (gearShift==0) -> cont_lasts_18++;
				::cont_lasts_18==3 -> ex_Lasts_18=0;
			fi;
		::!ex_Lasts_18-> skip;
	fi;

	}
	if
		::flag==1 -> s=0; goto gen;
		::flag!=1 ->
			if
				::(gearShift!=7 || transmissionShaftState==0)->

			if
				::(actualGear!=4 || gearShift==0 || gearShift==1 || gearShift==6)->

			if
				::!(actualGear!=4 || gearShift!=1)->

					ex_Lasts_17=1; cont_lasts_17 = 0;

					i=0;
					do
						::i<3 && ex_futr_16[i]==0 -> ex_futr_16[i]=1;break;
						::i==3-> s=0; goto gen;
						::i<3 && ex_futr_16[i]!=0 -> i++;
					od;

				::(actualGear!=4 || gearShift!=1)->skip;

			fi;
				::!((actualGear!=4 || gearShift==0 || gearShift==1 || gearShift==6))-> s=0; goto gen;

			fi;
			if
				::!(actualGear!=4 || gearShift!=6)->

					ex_Lasts_18=1; cont_lasts_18 = 0;

					i=0;
					do
						::i<3 && ex_futr_17[i]==0 -> ex_futr_17[i]=1;break;
						::i==3-> s=0; goto gen;
						::i<3 && ex_futr_17[i]!=0 -> i++;
					od;

				::(actualGear!=4 || gearShift!=6)->skip;

			fi;
				::!((gearShift!=7 || transmissionShaftState==0))-> s=0; goto gen;

			fi;
	fi;
	atomic{
	i=0;
	do
		::i<3-> proc=35+i;
			if
				::ex_futr_18[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_18[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_18[i]->skip;
			fi;
			i++;
		::i==3->break;
	od;
	i=0;
	do
		::i<3-> proc=38+i;
			if
				::ex_futr_19[i]->	msg!1,1,proc;
					msg?value,status,eval(proc);
					if
						::!value->flag=1;
						::value->skip;
					fi;
					if
						::status->ex_futr_19[i]=0;
						::!status->skip;
					fi;
				::!ex_futr_19[i]->skip;
			fi;
			i++;
		::i==3->break;
	od;

	if
		::ex_Lasts_19->
			if
				::cont_lasts_19<3 && !(gearShift==0) -> flag = 1;
				::cont_lasts_19<3 && (gearShift==0) -> cont_lasts_19++;
				::cont_lasts_19==3 -> ex_Lasts_19=0;
			fi;
		::!ex_Lasts_19-> skip;
	fi;

	if
		::ex_Lasts_20->
			if
				::cont_lasts_20<3 && !(gearShift==0) -> flag = 1;
				::cont_lasts_20<3 && (gearShift==0) -> cont_lasts_20++;
				::cont_lasts_20==3 -> ex_Lasts_20=0;
			fi;
		::!ex_Lasts_20-> skip;
	fi;

	}
	if
		::flag==1 -> s=0; goto gen;
		::flag!=1 ->
			if
				::(gearShift!=7 || transmissionShaftState==0)->

			if
				::(actualGear!=3 || transmissionShaftState==0) && (actualGear!=3 || gearShift==0 || gearShift==1 || gearShift==7)->

			if
				::!(actualGear!=3 || gearShift!=1)->

					ex_Lasts_19=1; cont_lasts_19 = 0;

					i=0;
					do
						::i<3 && ex_futr_18[i]==0 -> ex_futr_18[i]=1;break;
						::i==3-> s=0; goto gen;
						::i<3 && ex_futr_18[i]!=0 -> i++;
					od;

				::(actualGear!=3 || gearShift!=1)->skip;

			fi;
				::!((actualGear!=3 || transmissionShaftState==0) && (actualGear!=3 || gearShift==0 || gearShift==1 || gearShift==7))-> s=0; goto gen;

			fi;
			if
				::!(actualGear!=3 || gearShift!=7)->

					ex_Lasts_20=1; cont_lasts_20 = 0;

					i=0;
					do
						::i<3 && ex_futr_19[i]==0 -> ex_futr_19[i]=1;break;
						::i==3-> s=0; goto gen;
						::i<3 && ex_futr_19[i]!=0 -> i++;
					od;

				::(actualGear!=3 || gearShift!=7)->skip;

			fi;
				::!((gearShift!=7 || transmissionShaftState==0))-> s=0; goto gen;

			fi;
	fi;
	goto gen;
gen:
	t0=1;
	if
		::s==0 -> t0=0; goto stop;
		::s!=0 -> skip;
	fi;
	t0=0;
	goto rigen;

stop:

	i=0;
	do
		::i<1-> proc=2+i;
			msg!0,0,proc;
			i++;
		::i==1-> break;
	od;

	i=0;
	do
		::i<1-> proc=3+i;
			msg!0,0,proc;
			i++;
		::i==1-> break;
	od;

	i=0;
	do
		::i<1-> proc=4+i;
			msg!0,0,proc;
			i++;
		::i==1-> break;
	od;

	i=0;
	do
		::i<1-> proc=5+i;
			msg!0,0,proc;
			i++;
		::i==1-> break;
	od;

	i=0;
	do
		::i<1-> proc=6+i;
			msg!0,0,proc;
			i++;
		::i==1-> break;
	od;

	i=0;
	do
		::i<1-> proc=7+i;
			msg!0,0,proc;
			i++;
		::i==1-> break;
	od;

	i=0;
	do
		::i<1-> proc=8+i;
			msg!0,0,proc;
			i++;
		::i==1-> break;
	od;

	i=0;
	do
		::i<2-> proc=9+i;
			msg!0,0,proc;
			i++;
		::i==2-> break;
	od;

	i=0;
	do
		::i<3-> proc=11+i;
			msg!0,0,proc;
			i++;
		::i==3-> break;
	od;

	i=0;
	do
		::i<3-> proc=14+i;
			msg!0,0,proc;
			i++;
		::i==3-> break;
	od;

	i=0;
	do
		::i<3-> proc=17+i;
			msg!0,0,proc;
			i++;
		::i==3-> break;
	od;

	i=0;
	do
		::i<2-> proc=20+i;
			msg!0,0,proc;
			i++;
		::i==2-> break;
	od;

	i=0;
	do
		::i<2-> proc=22+i;
			msg!0,0,proc;
			i++;
		::i==2-> break;
	od;

	i=0;
	do
		::i<2-> proc=24+i;
			msg!0,0,proc;
			i++;
		::i==2-> break;
	od;

	i=0;
	do
		::i<3-> proc=26+i;
			msg!0,0,proc;
			i++;
		::i==3-> break;
	od;

	i=0;
	do
		::i<3-> proc=29+i;
			msg!0,0,proc;
			i++;
		::i==3-> break;
	od;

	i=0;
	do
		::i<3-> proc=32+i;
			msg!0,0,proc;
			i++;
		::i==3-> break;
	od;

	i=0;
	do
		::i<3-> proc=35+i;
			msg!0,0,proc;
			i++;
		::i==3-> break;
	od;

	i=0;
	do
		::i<3-> proc=38+i;
			msg!0,0,proc;
			i++;
		::i==3-> break;
	od;

	skip;		
}

init{
	run spe();
}