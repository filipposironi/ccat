class PlanetaryGearSet (const singleGearShiftDelay, const dualGearShiftDelay, const reverseGearShiftDelay) 

signature: 

	visible: gearShift, gearReverse, actualGear;

	temporal domain: real;
	
	domains:
		Gear: {First, Second, Third, Park, Reverse};
		ShiftWidth: 1..2;
		ShiftDirection: {Up, Down};

	items: 
		event gearShift (ShiftWidth, ShiftDirection);
		event gearReverse;
		TD total actualGear: Gear;		
	
	/*
	 * Aggiungere le formule necessarie per garantire il corretto funzionamento
	 * del cambio. Quindi, per un evento gearUp (1) ottengo 1 -> 2, 2 -> 3,
	 * ecc...
	 * Inoltre, è necessario impedire la chiamata a gearUp (x) e gearDown (x)
	 * quando la marcia selezionata è Park o Reverse.
	 * Manca del tutto la modellizzazione della marcia Park, immagino sia
	 * necessario aggiungere anche in questo caso una tempistica come abbiamo
	 * fatto per le altre marcie (non dovrebbe costare poi molto ed è una cosa
	 * aggiuntiva che dobbiamo ricordarci di citare in un'eventuale
	 * documentazione).
	 *
	 * ConcurrentGearsShift:
	 * Alw (
	 *     (gearUp (gearShift) -> not (gearDown (gearShift) | gearReverse)) &
	 *     (gearDown (gearShift) -> not (gearUp (gearShift) | gearReverse)) &
	 *     (gearReverse -> not (gearUp (gearShift) | gearDown (gearShift)))
	 * );
	 *
	 * Inoltre, è necessario modellizzare la necessità che non avvengano altri
	 * eventi di cambio marcia quando si è già nel processo di cambiata.
	 */
	axioms:
	vars:
		gearShiftWidth: ShiftWidth;
		gearShiftDirection: ShiftDirection;
		gear: Gear;
	formulae:
		AvailableGearShifts:
			(actualGear = First -> Alw (all gearShiftWidth (gearShiftDirection = Down & not gearShift (gearShiftWidth, gearShiftDirection)))) &
			(actualGear = Second -> Alw (all gearShiftDirection (not (gearShiftWidth (2, gearShiftDirection) & gearShift (2, gearShiftDirection))))) &
			(actualGear = Third -> Alw (all gearShiftWidth (gearShiftDirection = Up & not gearShift (gearShiftWidth, gearShiftDirection)))) &
			(actualGear = Reverse -> Alw (not gearReverse));
		
		GearsShifts:
			((actualGear = First & gearShiftWidth = 1 & gearShiftDirection = Up & gearShift (gearShiftWidth, gearShiftDirection))
				-> Futr (actualGear = Second, singleGearShiftDelay)) & 
			((actualGear = First & gearShiftWidth = 2 & gearShiftDirection = Up & gearShift (gearShiftWidth, gearShiftDirection))
				-> Futr (actualGear = Third, dualGearShiftDelay)) &
			((actualGear = Second & gearShiftWidth = 1 & gearShiftDirection = Up & gearShift (gearShiftWidth, gearShiftDirection))
				-> Futr (actualGear = Third, singleGearShiftDelay)) &
			((actualGear = Second & gearShiftWidth = 1 & gearShiftDirection = Down & gearShift (gearShiftWidth, gearShiftDirection))
				-> Futr (actualGear = First, singleGearShiftDelay)) &
			((actualGear = Third & gearShiftWidth = 1 & gearShiftDirection = Down & gearShift (gearShiftWidth, gearShiftDirection))
				-> Futr (actualGear = Second, singleGearShiftDelay)) &
			((actualGear = Third & gearShiftWidth = 2 & gearShiftDirection = Down & gearShift (gearShiftWidth, gearShiftDirection))
				-> Futr (actualGear = First, dualGearShiftDelay)) &
			(all gear (gear <> Reverse & actualGear = gear & gearReverse)
				-> Futr (actualGear = Reverse, reverseGearShiftDelay));
			
end